{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP%20VCTS/Desktop/Projects/ikinci-beyin/src/components/GraphView.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState, useMemo, useCallback } from 'react';\r\nimport { Note } from '../app/page';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\n// Bileşen tarafından kullanılan veri yapıları (arayüzler)\r\ninterface GraphViewProps {\r\n  notes: Note[];\r\n  onNodeClick: (note: Note) => void;\r\n}\r\ninterface GraphNode {\r\n  id: number;\r\n  name: string;\r\n}\r\ninterface GraphLink {\r\n  source: GraphNode | number;\r\n  target: GraphNode | number;\r\n}\r\ninterface GraphData {\r\n  nodes: GraphNode[];\r\n  links: GraphLink[];\r\n}\r\n\r\nexport default function GraphView({ notes, onNodeClick }: GraphViewProps) {\r\n  // Fareyle üzerine gelinen notu hafızada tutmak için state\r\n  const [hoveredNode, setHoveredNode] = useState<GraphNode | null>(null);\r\n\r\n  // Not listesi değiştiğinde, grafik verisini yeniden hesaplamak için useMemo kullanıyoruz.\r\n  // Bu, gereksiz hesaplamaları önleyerek performansı artırır.\r\n  const graphData: GraphData = useMemo(() => {\r\n    if (!notes) return { nodes: [], links: [] };\r\n\r\n    const nodes = notes.map(note => ({\r\n      id: note.id,\r\n      name: note.title,\r\n    }));\r\n\r\n    const links: GraphLink[] = [];\r\n    const regex = /\\[\\[(.*?)\\]\\]/g;\r\n\r\n    notes.forEach(note => {\r\n      const matches = [...note.content.matchAll(regex)];\r\n      matches.forEach(match => {\r\n        const linkedTitle = match[1].toLowerCase();\r\n        const targetNode = nodes.find(n => n.name.toLowerCase() === linkedTitle);\r\n        // Hedef not varsa ve hedef not kendisi değilse link oluştur\r\n        if (targetNode && targetNode.id !== note.id) {\r\n          links.push({\r\n            source: note.id,\r\n            target: targetNode.id,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return { nodes, links };\r\n  }, [notes]);\r\n\r\n  // Üzerine gelinen nota bağlı olan komşuları ve linkleri bulmak için useMemo kullanıyoruz.\r\n  const { highlightedNodes, highlightedLinks } = useMemo(() => {\r\n    if (hoveredNode) {\r\n      const nodeSet = new Set<number>([hoveredNode.id]);\r\n      const linkSet = new Set<GraphLink>();\r\n\r\n      graphData.links.forEach(link => {\r\n        // Kütüphane link.source/target'ı nesneye çevirebilir.\r\n        // Bu yüzden her ihtimale karşı ID'leri kontrol ediyoruz.\r\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\r\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\r\n\r\n        if (sourceId === hoveredNode.id || targetId === hoveredNode.id) {\r\n          linkSet.add(link);\r\n          nodeSet.add(sourceId);\r\n          nodeSet.add(targetId);\r\n        }\r\n      });\r\n\r\n      return { highlightedNodes: nodeSet, highlightedLinks: linkSet };\r\n    }\r\n    return { highlightedNodes: new Set(), highlightedLinks: new Set() };\r\n  }, [hoveredNode, graphData]);\r\n\r\n  // Bu bileşen sadece tarayıcıda çalıştığı için, sunucu tarafında render edilmesini engelliyoruz.\r\n  const [isClient, setIsClient] = useState(false);\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  // Tıklama fonksiyonunu useCallback ile optimize ediyoruz.\r\n  const handleNodeClick = useCallback((node: any) => {\r\n    const clickedNote = notes.find(n => n.id === node.id);\r\n    if (clickedNote) {\r\n      onNodeClick(clickedNote);\r\n    }\r\n  }, [notes, onNodeClick]);\r\n\r\n  return (\r\n    <div className=\"mt-8 w-full max-w-7xl h-[600px] bg-gray-800 border border-gray-700 rounded-lg overflow-hidden\">\r\n      {isClient && (\r\n        <ForceGraph2D\r\n          graphData={graphData}\r\n          nodeLabel=\"name\"\r\n          onNodeClick={handleNodeClick}\r\n          onNodeHover={node => setHoveredNode(node as GraphNode | null)}\r\n          \r\n          // Bağlantıların (çizgilerin) stilini belirliyoruz\r\n          linkColor={(link: any) => highlightedLinks.has(link) ? 'rgba(192, 132, 252, 1)' : 'rgba(255, 255, 255, 0.2)'}\r\n          linkWidth={(link: any) => highlightedLinks.has(link) ? 2 : 1}\r\n          linkDirectionalArrowLength={3.5}\r\n          linkDirectionalArrowRelPos={1}\r\n\r\n          // Notların (noktaların) nasıl çizileceğini belirliyoruz\r\n          nodeCanvasObject={(node: any, ctx, globalScale) => {\r\n            const label = node.name;\r\n            const fontSize = 12 / globalScale;\r\n            ctx.font = `bold ${fontSize}px Sans-Serif`;\r\n            const isHighlighted = highlightedNodes.has(node.id);\r\n\r\n            // Yazının stilini belirliyoruz\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillStyle = isHighlighted ? 'rgba(233, 213, 255, 1)' : 'rgba(255, 255, 255, 0.8)';\r\n            ctx.fillText(label, node.x, node.y + 10);\r\n\r\n            // Noktanın kendisini çiziyoruz\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, isHighlighted ? 6 : 4, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = isHighlighted ? 'rgba(192, 132, 252, 1)' : 'rgba(255, 255, 255, 0.6)';\r\n            ctx.fill();\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}